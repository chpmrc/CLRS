4.1-1)
        The array itself

4.1-2)
        See ./max-subarray-brute.py

4.1-3)
        See ./max-subarray-recursive.py and compare with the previous point.

4.1-4)
        If the sum of an empty subarray is 0 then if any of the subarrays yield a negative sum we just return an empty subarray

4.1-5)
		TODO

4.3-1)
    T(n) = T(n-1) + n is O(n^2) -> We assume T(m) <= cm^2 valid for at least m = n - 1 so that T(n - 1) <= c(n  - 1)^2 - 1

    T(n) <= c(n - 1)^2 + n =
            c(n^2 - 2n + 1) + n =
            cn^2 - 2cn + n + c. Let us assume c = 1
            n^2 - 2n + n + 1.

    If the inequality above holds then T(n) <= n^2 with c = 1. So it's O(n^2)

4.3-2)
    T(n) = T(n/2) + 1 is O(lgn). Let us assume T(n/2) <= c*lg(n/2)

    T(n) <= c*lg(n/2) + lg(2) # Let's choose c = 1 and use lg(a) + lg(b) = lg(a*b)
    T(n) <= lg(n/2 * 2) = lg(n)

    DONE.

4.3-3)

    T(n) = 2T(n/2) + n
    Let us assume that T(n/2) >= c(n/2 + 1) * lg(n/2 + 1)
    T(n) <= 2(c(n/2 + 1) * lg(n/2 + 1)) + n =
            2(c((n + 2) / 2)) * lg((n + 2) / 2) + n = # Using lg(a/b) = lg(a) - lg(b)
            (cn + 2c) * ( lg(n + 2) + lg2 ) + n = # Let's expand the product and lg2 = 1
            (cn + 2c) * lg(n + 2) - (cn + 2c) + n =
            c(n + 2) * lg(n + 2) - c(n + 2) + n. Let's assume c = 1

            (n + 2) * lg(n + 2) - n - 2 + n =
            (n + 2) * lg(n + 2) - 2

    If the inequality above holds then:

    T(n) <= n * lg(n) so T(n) = Om(n*lg(n))

4.3-4)

    T(n) = 2T(n/2) + n

    Base case is T(1) = 1. With O(nlgn) we have T(1) = 1*(lg1) = 0. Since O-notation ignores constant factors we can prove T(n) <= cnlgn + 1 <= cnlgn

    T(n) = 2 * c(n/2)lg(n/2) + 1 + n (same as above)

4.3-5)

    T(n) = 2T(n/2) + O(n)

    It's the same as 4.3-3 but we replace O(n) with cn instead of just n. Obviously choosing c = 1 nothing changes.

4.3-5)

    T(n) = 2T(n/2 + 17) + n is O(nlgn)
    2(c((n + 2) / 2)) * lg((n + 2) / 2) + n = # Using lg(a/b) = lg(a) - lg(b)
    (cn + 2c) * ( lg(n + 2) + lg2 ) + n = # Let's expand the product and lg2 = 1
    (cn + 2c) * lg(n + 2) - (cn + 2c) + n =
    c(n + 2) * lg(n + 2) - c(n + 2) + n. Let's assume c = 1

4.3-6) TODO

4.3-7) TODO

4.3-8) TODO

4.3-9) TODO
